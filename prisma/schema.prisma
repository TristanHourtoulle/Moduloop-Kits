// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  DEV
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  firstName     String?
  lastName      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  createdProducts Product[] @relation("ProductCreatedBy")
  updatedProducts Product[] @relation("ProductUpdatedBy")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String  @unique
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Product {
  id                    String   @id @default(cuid())
  nom                   String
  reference             String   @unique
  description           String?
  
  // Prix d'achat fournisseur (1, 2, 3 ans)
  prixAchat1An          Float
  prixAchat2Ans         Float?
  prixAchat3Ans         Float?
  
  // Prix unitaire Moduloop (1, 2, 3 ans)
  prixUnitaire1An       Float
  prixUnitaire2Ans      Float?
  prixUnitaire3Ans      Float?
  
  // Prix de vente total Moduloop (1, 2, 3 ans)
  prixVente1An          Float
  prixVente2Ans         Float?
  prixVente3Ans         Float?
  
  // Marge appliquée (coefficient)
  margeCoefficient      Float
  
  // Surface occupée (m²)
  surfaceM2             Float
  
  // Impact environnemental
  rechauffementClimatique Float  // kg eq. CO2
  epuisementRessources    Float  // MJ
  acidification           Float  // MOL H+
  eutrophisation          Float  // kg P eq.
  
  // Quantité
  quantite              Int
  
  // Image (base64)
  image                 String?
  
  // Métadonnées
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdById           String
  updatedById           String
  
  // Relations
  createdBy User @relation("ProductCreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  
  @@map("products")
}
